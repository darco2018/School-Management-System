package pl.ust.school.security;

import java.util.List;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.builders.WebSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;

import pl.ust.school.user.Role;


@Configuration
@EnableWebSecurity // enables httpbasic and form authentication, renders login page automatically
// remember to Import this class in AppConfig.java
public class DatabaseSecurityConfig extends WebSecurityConfigurerAdapter {
	/*
	@Autowired
	private DataSource dataSource;    // PROJEKT 2:  data source jest w DAO
	
	// PRojekt 2:  Roles are found by DAO
	 * List<String> roles = this.getJdbcTemplate().queryForList(sqlToFindRoles, params, String.class);
	 * 
	 // PROJEKT 2:  UserDetailsServiceImpl - finds UserbyName with DAO, loads username, password i GrantedAuthorites 
	 // into UserDetails object and returns it. The UserDetails object becomes part of Authentication object

	@Autowired
	public void configureGlobal(AuthenticationManagerBuilder authenticationMgr) throws Exception{
		
		authenticationMgr
			.jdbcAuthentication()
			.dataSource(dataSource)
			.passwordEncoder(new BCryptPasswordEncoder())
			//.withUser("darek").password("darek").authorities("DEV").and() - will work if email is nullable and default names for users and authorities tables
			.usersByUsernameQuery("select username, password, enabled from users where username=?")
			.authoritiesByUsernameQuery("select username, user_role from user_roles where username=?");
		 the two lines above necessary when changing default table values
		    RENAME TABLE authorities TO user_roles;
			ALTER TABLE user_roles CHANGE authority user_role varchar(255);
	}*/
	
	
	
	
	@Override
	public void configure(WebSecurity web) throws Exception {
		web.ignoring().antMatchers("/*.css");
		web.ignoring().antMatchers("/*.js");
	}
	
	
			
	//Authorization
	@Override
	protected void configure(HttpSecurity http) throws Exception{
		
		final String developerPath = "dev";
		final String adminPath = "admin";
		final String schoolAdminPath = "schooladmin";
		final String teacherPath = "teacheruser";
		final String studentPath = "studentuser";
		final String parentPath = "parentuser";
		
		http
		.authorizeRequests()
			.antMatchers("/", "/resources/**", "/locale").permitAll()
			.anyRequest().authenticated()
			.and()
		.formLogin()
			.loginPage("/login").permitAll() // ("/login.html")
			//If this is not specified, a default URL is used – spring_security_login – and Spring Security will generate a very basic Login Form at that URL.
			
			//The default URL where the Spring Login will POST to trigger the authentication process is /login 
			// This URL can be overridden 
			.loginProcessingUrl("/perform_login") // Specifies the URL to validate the credentials.
			
			// After a successful Login process, the user is redirected to a page – which by default is the root of the web application.
			// This URL can be overridden 
			.defaultSuccessUrl("/", true) // ("/homepage.html") 
			// This is a shortcut for calling successHandler(AuthenticationSuccessHandler).
			// alwaysUse true if the defaultSuccesUrl should be used after authentication 
			//despite if a protected page had been previously visiteddespite if a protected page had been previously visited.
			//If that attribute is set to false, then the user will be redirected to the previous page they wanted to visit before being promoted to authenticate.
			
			//the Login Failure Page is autogenerated by Spring Security at /login?error by default.
			.failureUrl("/login.html?error=true")
			.usernameParameter("username").passwordParameter("password")
			.and()
			
		.logout().permitAll()
		.logoutSuccessUrl("/login.html")
		.and()
        .csrf(); // Adds CSRF support. This is activated by default when using WebSecurityConfigurerAdapter's default constructor. 
		
		 
		
			
	}
	/*
	@Bean
    @Override
    public UserDetailsService userDetailsService() {
        UserDetails user =
             User.withDefaultPasswordEncoder()
                .username("user")
                .password("password")
                .roles("USER")
                .build();

        return new InMemoryUserDetailsManager(user);
    }*/

}
